"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/books/[id]/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchTranscribeChapters: function() { return /* binding */ batchTranscribeChapters; },\n/* harmony export */   deleteBook: function() { return /* binding */ deleteBook; },\n/* harmony export */   fetchBook: function() { return /* binding */ fetchBook; },\n/* harmony export */   fetchBooks: function() { return /* binding */ fetchBooks; },\n/* harmony export */   fetchChapter: function() { return /* binding */ fetchChapter; },\n/* harmony export */   fetchChapterContent: function() { return /* binding */ fetchChapterContent; },\n/* harmony export */   fetchChapters: function() { return /* binding */ fetchChapters; },\n/* harmony export */   fetchChaptersWithLexileScores: function() { return /* binding */ fetchChaptersWithLexileScores; },\n/* harmony export */   importBook: function() { return /* binding */ importBook; },\n/* harmony export */   translateText: function() { return /* binding */ translateText; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst API_BASE_URL = \"http://127.0.0.1:8081/api\";\n// const API_BASE_URL = 'https://ra.ku-m.cn/api'\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 10000\n});\n// 获取书籍列表\nasync function fetchBooks() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10, sortBy = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"bookName\", direction = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"asc\";\n    const { data } = await api.get(\"/books\", {\n        params: {\n            page,\n            size,\n            sortBy,\n            direction\n        }\n    });\n    return data;\n}\n// 获取书籍详情\nasync function fetchBook(id) {\n    const { data } = await api.get(\"/books/\".concat(id));\n    return data;\n}\n// 获取章节列表\nasync function fetchChapters(bookId) {\n    let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, size = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 100, sortBy = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"chapterName\", direction = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"asc\";\n    const { data } = await api.get(\"/chapters/book/\".concat(bookId), {\n        params: {\n            page,\n            size,\n            sortBy,\n            direction\n        }\n    });\n    return data;\n}\n// 获取带有蓝思值的章节列表\nasync function fetchChaptersWithLexileScores(bookId) {\n    let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, size = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 100, sortBy = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"chapterOrder\", direction = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"asc\";\n    const { data } = await api.get(\"/chapters/book/\".concat(bookId, \"/with-lexile\"), {\n        params: {\n            page,\n            size,\n            sortBy,\n            direction\n        }\n    });\n    return data;\n}\n// 获取章节内容\nasync function fetchChapter(chapterId) {\n    let startAI = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, lexileNo = arguments.length > 2 ? arguments[2] : void 0, priorityVocabulary = arguments.length > 3 ? arguments[3] : void 0;\n    console.log(\"=== API 调用 fetchChapter 开始 ===\");\n    console.log(\"参数:\", {\n        chapterId,\n        startAI,\n        lexileNo,\n        priorityVocabulary\n    });\n    try {\n        const { data } = await api.get(\"/chapters/\".concat(chapterId), {\n            params: {\n                startAI,\n                ...lexileNo && {\n                    lexileNo\n                },\n                ...priorityVocabulary && {\n                    priorityVocabulary\n                },\n                // 添加时间戳参数，避免缓存\n                _t: Date.now()\n            }\n        });\n        console.log(\"=== API 调用 fetchChapter 成功 ===\");\n        console.log(\"返回数据:\", {\n            chapterId: data.chapterId,\n            chapterName: data.chapterName\n        });\n        return data;\n    } catch (error) {\n        console.error(\"=== API 调用 fetchChapter 失败 ===\", error);\n        throw error;\n    }\n}\n// 获取章节内容\nasync function fetchChapterContent(id) {\n    console.log(\"=== API 调用 fetchChapterContent 开始 ===\", id);\n    try {\n        const { data } = await api.get(\"/chapters/\".concat(id, \"/content\"), {\n            params: {\n                // 添加时间戳参数，避免缓存\n                _t: Date.now()\n            }\n        });\n        console.log(\"=== API 调用 fetchChapterContent 成功 ===\");\n        return data;\n    } catch (error) {\n        console.error(\"=== API 调用 fetchChapterContent 失败 ===\", error);\n        throw error;\n    }\n}\n// 批量转写章节\nasync function batchTranscribeChapters(bookId, startChapter, endChapter, lexileScore) {\n    if (!bookId) {\n        return {\n            success: false,\n            message: \"书籍ID不能为空\"\n        };\n    }\n    console.log(\"开始批量转写书籍 \".concat(bookId, \" 的章节 \").concat(startChapter, \" 到 \").concat(endChapter, \"，蓝思值: \").concat(lexileScore));\n    try {\n        // 直接发送请求，让后端处理错误情况\n        const { data } = await api.post(\"/books/\".concat(bookId, \"/batch-transcribe\"), null, {\n            params: {\n                startChapter,\n                endChapter,\n                lexileScore\n            }\n        });\n        console.log(\"批量转写响应:\", data);\n        // 如果后端返回\"该书籍没有章节\"的错误，提供更详细的指导\n        if (!data.success && data.message === \"该书籍没有章节\") {\n            return {\n                success: false,\n                message: \"该书籍没有章节。请先导入章节内容，或者检查书籍ID是否正确。\"\n            };\n        }\n        return data;\n    } catch (error) {\n        var _error_response, _error_response_data, _error_response1;\n        console.error(\"批量转写失败:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n        return {\n            success: false,\n            message: ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"批量转写请求失败，请稍后再试\"\n        };\n    }\n}\n// 删除书籍\nasync function deleteBook(bookId) {\n    console.log(\"删除书籍 \".concat(bookId));\n    try {\n        const { data } = await api.delete(\"/books/\".concat(bookId));\n        return data;\n    } catch (error) {\n        console.error(\"删除书籍失败:\", error);\n        return {\n            success: false,\n            message: \"删除书籍请求失败\"\n        };\n    }\n}\n// 导入书籍\nasync function importBook(bookData) {\n    try {\n        console.log(\"开始导入书籍:\", bookData.bookName, \"章节数:\", bookData.chapters.length);\n        // 转换数据格式以匹配后端 API 期望的格式\n        const requestData = {\n            bookName: bookData.bookName,\n            chapters: bookData.chapters.map((chapter)=>({\n                    chapterName: chapter.chapterName,\n                    content: chapter.content,\n                    order: chapter.order\n                }))\n        };\n        const { data } = await api.post(\"/books/import\", requestData);\n        console.log(\"导入书籍成功:\", data);\n        return {\n            success: data.success === true,\n            message: data.message || \"书籍导入成功\",\n            bookId: data.bookId\n        };\n    } catch (error) {\n        var _error_response, _error_response_data, _error_response1;\n        console.error(\"导入书籍失败:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n        return {\n            success: false,\n            message: ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"导入书籍失败，请稍后再试\"\n        };\n    }\n}\n// 翻译文本\nasync function translateText(text) {\n    let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"text\";\n    try {\n        const response = await api.get(\"/translate\", {\n            params: {\n                text,\n                type\n            }\n        });\n        const data = response.data;\n        return {\n            translation: data.translation && data.translation.length > 0 ? data.translation[0] : text,\n            speakUrl: data.speakUrl,\n            tSpeakUrl: data.tSpeakUrl,\n            basic: data.basic,\n            ...data\n        };\n    } catch (error) {\n        console.error(\"翻译请求失败:\", error);\n        return {\n            translation: text,\n            basic: {\n                explains: [\n                    \"翻译失败\"\n                ]\n            }\n        };\n    }\n}\n// 错误处理中间件\napi.interceptors.response.use((response)=>response, (error)=>{\n    if (error.response) {\n        // 服务器返回错误状态码\n        const { status, data } = error.response;\n        console.error(\"API Error (\".concat(status, \"):\"), data);\n    } else if (error.request) {\n        // 请求发送失败\n        console.error(\"Request Error:\", error.request);\n    } else {\n        // 请求配置错误\n        console.error(\"Error:\", error.message);\n    }\n    return Promise.reject(error);\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});